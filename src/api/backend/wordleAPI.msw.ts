/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Wordle API
 * This is an API for Wordle
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";
import type { RequestHandlerOptions } from "msw";

import type { HealthResponse, PingResponse, WordleSolveResponse } from "./wordleAPI.schemas";

export const getSolveWordleResponseMock = (
  overrideResponse: Partial<WordleSolveResponse> = {},
): WordleSolveResponse => ({
  suggestions: (() => Array.from({ length: 5 }).map(() => faker.word.sample({ length: 5 })))(),
  alternatives: (() => Array.from({ length: 5 }).map(() => faker.word.sample({ length: 5 })))(),
  remaining: (() => faker.number.int({ min: 1, max: 20 }))(),
  used_letters: (() => [...new Set(faker.string.alpha({ casing: "lower" }))])(),
  ...overrideResponse,
});

export const getPingResponseMock = (
  overrideResponse: Partial<PingResponse> = {},
): PingResponse => ({
  response: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getHealthResponseMock = (
  overrideResponse: Partial<HealthResponse> = {},
): HealthResponse => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  response: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getSolveWordleMockHandler = (
  overrideResponse?:
    | WordleSolveResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<WordleSolveResponse> | WordleSolveResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/wordle",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSolveWordleResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getPingMockHandler = (
  overrideResponse?:
    | PingResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PingResponse> | PingResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/ping",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPingResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getHealthMockHandler = (
  overrideResponse?:
    | HealthResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HealthResponse> | HealthResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/health",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getHealthResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};
export const getWordleAPIMock = () => [
  getSolveWordleMockHandler(),
  getPingMockHandler(),
  getHealthMockHandler(),
];
