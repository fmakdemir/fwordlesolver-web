/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Wordle API
 * This is an API for Wordle
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type { WordleSolveRequest, WordleSolveResponse } from "./wordleAPI.schemas";

/**
 * @summary Solve Wordle
 */
export const solveWordle = (
  wordleSolveRequest: MaybeRef<WordleSolveRequest>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<WordleSolveResponse>> => {
  wordleSolveRequest = unref(wordleSolveRequest);

  return axios.default.post(`/wordle-solver/api/wordle`, wordleSolveRequest, options);
};

export const getSolveWordleMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof solveWordle>>,
    TError,
    { data: WordleSolveRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof solveWordle>>,
  TError,
  { data: WordleSolveRequest },
  TContext
> => {
  const mutationKey = ["solveWordle"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof solveWordle>>,
    { data: WordleSolveRequest }
  > = (props) => {
    const { data } = props ?? {};

    return solveWordle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SolveWordleMutationResult = NonNullable<Awaited<ReturnType<typeof solveWordle>>>;
export type SolveWordleMutationBody = WordleSolveRequest;
export type SolveWordleMutationError = AxiosError<unknown>;

/**
 * @summary Solve Wordle
 */
export const useSolveWordle = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof solveWordle>>,
    TError,
    { data: WordleSolveRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof solveWordle>>,
  TError,
  { data: WordleSolveRequest },
  TContext
> => {
  const mutationOptions = getSolveWordleMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Ping
 */
export const ping = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.default.get(`/wordle-solver/api/ping`, options);
};

export const getPingQueryKey = () => {
  return ["wordle-solver", "api", "ping"] as const;
};

export const getPingQueryOptions = <
  TData = Awaited<ReturnType<typeof ping>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getPingQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ping>>> = ({ signal }) =>
    ping({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ping>>,
    TError,
    TData
  >;
};

export type PingQueryResult = NonNullable<Awaited<ReturnType<typeof ping>>>;
export type PingQueryError = AxiosError<unknown>;

/**
 * @summary Ping
 */

export function usePing<
  TData = Awaited<ReturnType<typeof ping>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}
