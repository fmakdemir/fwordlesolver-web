/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Wordle API
 * This is an API for Wordle
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/vue-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from "@tanstack/vue-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
export interface WordleSolveResponse {
  suggestions: string[];
  alternatives: string[];
  remaining: number;
  used_letters: string[];
}

export interface WordleSolveRequest {
  words: string[];
  places: string[];
  size: number;
}

/**
 * @summary Solve Wordle
 */
export const fwordlesolverApiApiSolveWordle = (
  wordleSolveRequest: MaybeRef<WordleSolveRequest>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<WordleSolveResponse>> => {
  wordleSolveRequest = unref(wordleSolveRequest);

  return axios.default.post(`/wordle-solver/api/wordle`, wordleSolveRequest, options);
};

export const getFwordlesolverApiApiSolveWordleMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fwordlesolverApiApiSolveWordle>>,
    TError,
    { data: WordleSolveRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof fwordlesolverApiApiSolveWordle>>,
  TError,
  { data: WordleSolveRequest },
  TContext
> => {
  const mutationKey = ["fwordlesolverApiApiSolveWordle"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fwordlesolverApiApiSolveWordle>>,
    { data: WordleSolveRequest }
  > = (props) => {
    const { data } = props ?? {};

    return fwordlesolverApiApiSolveWordle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FwordlesolverApiApiSolveWordleMutationResult = NonNullable<
  Awaited<ReturnType<typeof fwordlesolverApiApiSolveWordle>>
>;
export type FwordlesolverApiApiSolveWordleMutationBody = WordleSolveRequest;
export type FwordlesolverApiApiSolveWordleMutationError = AxiosError<unknown>;

/**
 * @summary Solve Wordle
 */
export const useFwordlesolverApiApiSolveWordle = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fwordlesolverApiApiSolveWordle>>,
    TError,
    { data: WordleSolveRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof fwordlesolverApiApiSolveWordle>>,
  TError,
  { data: WordleSolveRequest },
  TContext
> => {
  const mutationOptions = getFwordlesolverApiApiSolveWordleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getFwordlesolverApiApiSolveWordleResponseMock = (
  overrideResponse: Partial<WordleSolveResponse> = {},
): WordleSolveResponse => ({
  suggestions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => faker.string.alpha(20),
  ),
  alternatives: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => faker.string.alpha(20),
  ),
  remaining: faker.number.int({ min: undefined, max: undefined }),
  used_letters: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => faker.string.alpha(20),
  ),
  ...overrideResponse,
});

export const getFwordlesolverApiApiSolveWordleMockHandler = (
  overrideResponse?:
    | WordleSolveResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<WordleSolveResponse> | WordleSolveResponse),
) => {
  return http.post("*/wordle-solver/api/wordle", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getFwordlesolverApiApiSolveWordleResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getWordleAPIMock = () => [getFwordlesolverApiApiSolveWordleMockHandler()];
